{"version":3,"sources":["../../src/pages/setting/setting.module.ts","webpack:///./~/@ionic-native/transfer/index.js?f394","webpack:///./~/@ionic-native/file-opener/index.js?0458","webpack:///./~/@ionic-native/file/index.js?a8c4","../../src/pages/setting/setting.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACO;AACZ;AACmB;AACW;AACxB;AAmB1C,IAAa,aAAa;IAA1B;IAA4B,CAAC;IAAD,oBAAC;AAAD,CAAC;AAAhB,aAAa;IAjBzB,sFAAQ,CAAC;QACR,YAAY,EAAE;YACZ,yDAAO;SACR;QACD,OAAO,EAAE;YACP,sEAAe,CAAC,QAAQ,CAAC,yDAAO,CAAC;SAClC;QACD,OAAO,EAAE;YACP,yDAAO;SACR;QACD,SAAS,EAAE;YACT,6EAAU;YACV,wEAAQ;YACR,8EAAc;YACd,gEAAI;SACL;KACF,CAAC;GACW,aAAa,CAAG;AAAH;;;;;;;;;;;;ACxB1B;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACqB;AACkE;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,8CAA8C;AACzD,WAAW,OAAO;AAClB;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,0EAAmB;AACxB;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,kBAAkB;AACjC,eAAe,QAAQ;AACvB,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sGAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACQ;AACR,iC;;;;;;;;;;AC1NA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACqB;AACwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,4BAA4B,OAAO;AACnC,iBAAiB;AACjB;AACA,mEAAmE,QAAQ;AAC3E;AACA;AACA,yBAAyB,OAAO;AAChC,iBAAiB;AACjB;AACA,2DAA2D,QAAQ;AACnE;AACA;AACA,yBAAyB,OAAO;AAChC,iBAAiB;AACjB;AACA,gEAAgE,QAAQ;AACxE;AACA,CAAC;AACD;AACA,KAAK,0EAAmB;AACxB;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACQ;AACR,iC;;;;;;;;;;AC/GA;AAAA;AACA;AACA,UAAU,gBAAgB,sCAAsC,iBAAiB,EAAE;AACnF,yBAAyB,uDAAuD;AAChF;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACqB;AAC8C;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,kCAAkC;AACvF,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gBAAgB;AACjE,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B,eAAe,cAAc;AAC7B,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,cAAc;AAC7B,eAAe,cAAc;AAC7B,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+BAA+B,WAAW,EAAE;AAC5C;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B,iBAAiB,cAAc;AAC/B;AACA;AACA,qDAAqD,gBAAgB;AACrE;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,gBAAgB;AACxE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8CAA8C;AAC9E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gBAAgB;AACjE,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gBAAgB;AACjE,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4BAA4B,OAAO;AACnC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,eAAe;AAC7C,6BAA6B,OAAO;AACpC,qBAAqB,MAAM;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,eAAe;AAC7C,wBAAwB,OAAO;AAC/B,qBAAqB,MAAM;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iCAAiC;AAC1D,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iCAAiC;AAC1D,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,KAAK,0EAAmB;AACxB;AACA;AACA,mCAAmiC;;;;;;;;;;;;;;;;;;;;;;;;;AC76B0C;AAC2C;AAC5B;AACX;AACS;AACW;AACxB;AAO1C,IAAa,OAAO;IAQlB,iBAAmB,UAAsB,EAAS,QAAkB,EAAS,IAAU,EAAQ,OAAsB,EAAS,SAAoB,EAAS,WAAwB,EAAS,SAA0B,EAAS,IAAU;QAAtN,eAAU,GAAV,UAAU,CAAY;QAAS,aAAQ,GAAR,QAAQ,CAAU;QAAS,SAAI,GAAJ,IAAI,CAAM;QAAQ,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QAAS,gBAAW,GAAX,WAAW,CAAa;QAAS,cAAS,GAAT,SAAS,CAAiB;QAAS,SAAI,GAAJ,IAAI,CAAM;QANzO,YAAO,GAAG,EAAE,CAAC;QACb,WAAM,GAAW,IAAI,CAAC;QACtB,mBAAc,GAAC,EAAE,CAAC;QAKhB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;QACxC,EAAE,EAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;YAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC;IACH,CAAC;IAED,qBAAG,GAAH;QACE,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,SAAS;IACT,+BAAa,GAAb;QAAA,iBAsBC;QArBC,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;QACzC,IAAI,GAAG,GAAG,4CAA4C,CAAC;QAEvD,IAAI,OAAO,GAAG,IAAI,8DAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;QAEpE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,EAAE;YACtB,OAAO,EAAE,OAAO;SACjB,CAAC;aACC,SAAS,CAAC,UAAC,GAAG;YACb,4BAA4B;YAC5B,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;gBACnD,KAAK;gBACL,KAAI,CAAC,cAAc,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC3C,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;gBAC3C,KAAI,CAAC,IAAI,EAAE,CAAC;YACd,CAAC;YAAA,IAAI,EAAC;gBACJ,KAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;gBACzC,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAC3C,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;IACR,0BAAQ,GAAR;QAAA,iBAaC;QAZC,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,qBAAqB,GAAG,WAAW,CAAC;QAC3D,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;YACjE,OAAO;YACP,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,yCAAyC,CAAC;iBACpE,IAAI,CAAC,cAAM,cAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAA7B,CAA6B,CAAC;iBACzC,KAAK,CAAC,WAAC,IAAI,YAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAnB,CAAmB,CAAC,CAAC;QAErC,CAAC,EAAE,UAAC,KAAK;YACP,eAAe;QACjB,CAAC,CAAC,CAAC;IAEL,CAAC;IAED,sBAAI,GAAJ;QAAA,iBAyBC;QAvBC,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,CAAC;QACzC,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAChC,KAAK,EAAE,IAAI;YACX,OAAO,EAAE,aAAa;YACtB,OAAO,EAAE;gBACP;oBACE,IAAI,EAAE,IAAI;oBACV,IAAI,EAAE,QAAQ;oBACd,OAAO,EAAE;wBACP,gCAAgC;oBAClC,CAAC;iBACF;gBACD;oBACE,IAAI,EAAE,IAAI;oBACV,OAAO,EAAE;wBACP,KAAI,CAAC,QAAQ,EAAE,CAAC;wBAChB,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;oBACnD,CAAC;iBACF;aACF;SACF,CAAC,CAAC;QAEH,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC;IAEH,cAAC;AAAD,CAAC;AAxFY,OAAO;IALnB,uFAAS,EAAE;IACX,uFAAS,CAAC;QACT,QAAQ,EAAE,cAAc;OACG;KAC5B,CAAC;YASyO;AAgF1O;SAxFY,OAAO,mB","file":"6.main.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { Setting } from './setting';\nimport { FileOpener } from '@ionic-native/file-opener';\nimport { Transfer, TransferObject } from '@ionic-native/transfer';\nimport { File } from '@ionic-native/file';\n\n@NgModule({\n  declarations: [\n    Setting,\n  ],\n  imports: [\n    IonicPageModule.forChild(Setting),\n  ],\n  exports: [\n    Setting\n  ],\n  providers: [\n    FileOpener,\n    Transfer,\n    TransferObject,\n    File\n  ]\n})\nexport class SettingModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/setting/setting.module.ts","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport { CordovaInstance, Plugin, InstanceCheck, checkAvailability, IonicNativePlugin } from '@ionic-native/core';\r\n/**\r\n * @name Transfer\r\n *\r\n * @description\r\n * This plugin allows you to upload and download files.\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Transfer, FileUploadOptions, TransferObject } from '@ionic-native/transfer';\r\n * import { File } from '@ionic-native/file';\r\n *\r\n * constructor(private transfer: Transfer, private file: File) { }\r\n *\r\n * ...\r\n *\r\n * const fileTransfer: TransferObject = this.transfer.create();\r\n *\r\n * // Upload a file:\r\n * fileTransfer.upload(..).then(..).catch(..);\r\n *\r\n * // Download a file:\r\n * fileTransfer.download(..).then(..).catch(..);\r\n *\r\n * // Abort active transfer:\r\n * fileTransfer.abort();\r\n *\r\n * // full example\r\n * upload() {\r\n *   let options: FileUploadOptions = {\r\n *      fileKey: 'file',\r\n *      fileName: 'name.jpg',\r\n *      headers: {}\r\n *      .....\r\n *   }\r\n *\r\n *   fileTransfer.upload('<file path>', '<api endpoint>', options)\r\n *    .then((data) => {\r\n *      // success\r\n *    }, (err) => {\r\n *      // error\r\n *    })\r\n * }\r\n **\r\n * download() {\r\n *   const url = 'http://www.example.com/file.pdf';\r\n *   fileTransfer.download(url, this.file.dataDirectory + 'file.pdf').then((entry) => {\r\n *     console.log('download complete: ' + entry.toURL());\r\n *   }, (error) => {\r\n *     // handle error\r\n *   });\r\n * }\r\n *\r\n * ```\r\n *\r\n * To store files in a different/publicly accessible directory, please refer to the following link\r\n * https://github.com/apache/cordova-plugin-file#where-to-store-files\r\n *\r\n * @interfaces\r\n * FileUploadOptions\r\n * FileUploadResult\r\n * FileTransferError\r\n * @classes\r\n * TransferObject\r\n */\r\nvar Transfer = (function (_super) {\r\n    __extends(Transfer, _super);\r\n    function Transfer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Error code rejected from upload with FileTransferError\r\n         * Defined in FileTransferError.\r\n         *      FILE_NOT_FOUND_ERR: 1   Return when file was not found\r\n         *      INVALID_URL_ERR: 2,     Return when url was invalid\r\n         *      CONNECTION_ERR: 3,      Return on connection error\r\n         *      ABORT_ERR: 4,           Return on aborting\r\n         *      NOT_MODIFIED_ERR: 5     Return on '304 Not Modified' HTTP response\r\n         * @enum {number}\r\n         */\r\n        _this.FileTransferErrorCode = {\r\n            FILE_NOT_FOUND_ERR: 1,\r\n            INVALID_URL_ERR: 2,\r\n            CONNECTION_ERR: 3,\r\n            ABORT_ERR: 4,\r\n            NOT_MODIFIED_ERR: 5\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Creates a new FileTransfer object\r\n     * @return {TransferObject}\r\n     */\r\n    Transfer.prototype.create = function () {\r\n        return new TransferObject();\r\n    };\r\n    return Transfer;\r\n}(IonicNativePlugin));\r\nTransfer.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nTransfer.ctorParameters = function () { return []; };\r\nTransfer = __decorate([\r\n    Plugin({\r\n        pluginName: 'FileTransfer',\r\n        plugin: 'cordova-plugin-file-transfer',\r\n        pluginRef: 'FileTransfer',\r\n        repo: 'https://github.com/apache/cordova-plugin-file-transfer'\r\n    })\r\n], Transfer);\r\nexport { Transfer };\r\n/**\r\n * @hidden\r\n */\r\nvar TransferObject = (function () {\r\n    function TransferObject() {\r\n        if (checkAvailability('FileTransfer', null, 'FileTransfer') === true) {\r\n            this._objectInstance = new FileTransfer();\r\n        }\r\n    }\r\n    /**\r\n     * Sends a file to a server.\r\n     *\r\n     * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.\r\n     * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().\r\n     * @param {FileUploadOptions} options  Optional parameters.\r\n     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\r\n     * @returns {Promise<FileUploadResult>} Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.\r\n     */\r\n    TransferObject.prototype.upload = function (fileUrl, url, options, trustAllHosts) {\r\n        return;\r\n    };\r\n    /**\r\n     * Downloads a file from server.\r\n     *\r\n     * @param {string} source  URL of the server to download the file, as encoded by encodeURI().\r\n     * @param {stirng} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.\r\n     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\r\n     * @param {object} Optional parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).\r\n     * @returns {Promise<any>} Returns a Promise that resolves to a FileEntry object.\r\n     */\r\n    TransferObject.prototype.download = function (source, target, trustAllHosts, options) {\r\n        return;\r\n    };\r\n    /**\r\n     * Registers a listener that gets called whenever a new chunk of data is transferred.\r\n     * @param listener {function} Listener that takes a progress event.\r\n     */\r\n    TransferObject.prototype.onProgress = function (listener) {\r\n        this._objectInstance.onprogress = listener;\r\n    };\r\n    /**\r\n     * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError\r\n     * object which has an error code of FileTransferError.ABORT_ERR.\r\n     */\r\n    TransferObject.prototype.abort = function () { };\r\n    return TransferObject;\r\n}());\r\n__decorate([\r\n    CordovaInstance({\r\n        successIndex: 2,\r\n        errorIndex: 3\r\n    }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, Object, Boolean]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], TransferObject.prototype, \"upload\", null);\r\n__decorate([\r\n    CordovaInstance({\r\n        successIndex: 2,\r\n        errorIndex: 3\r\n    }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, Boolean, Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], TransferObject.prototype, \"download\", null);\r\n__decorate([\r\n    InstanceCheck({ sync: true }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Function]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], TransferObject.prototype, \"onProgress\", null);\r\n__decorate([\r\n    CordovaInstance({\r\n        sync: true\r\n    }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", []),\r\n    __metadata(\"design:returntype\", void 0)\r\n], TransferObject.prototype, \"abort\", null);\r\nTransferObject = __decorate([\r\n    Plugin({\r\n        plugin: 'cordova-plugin-file-transfer',\r\n        pluginName: 'FileTransfer'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], TransferObject);\r\nexport { TransferObject };\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@ionic-native/transfer/index.js\n// module id = 369\n// module chunks = 0 6 7","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\r\n/**\r\n * @name File Opener\r\n * @description\r\n * This plugin will open a file on your device file system with its default application.\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { FileOpener } from '@ionic-native/file-opener';\r\n *\r\n * constructor(private fileOpener: FileOpener) { }\r\n *\r\n * ...\r\n *\r\n * this.fileOpener.open('path/to/file.pdf', 'application/pdf')\r\n *   .then(() => console.log('File is opened'))\r\n *   .catch(e => console.log('Error openening file', e));\r\n *\r\n * ```\r\n */\r\nvar FileOpener = (function (_super) {\r\n    __extends(FileOpener, _super);\r\n    function FileOpener() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Open an file\r\n     * @param filePath {string} File Path\r\n     * @param fileMIMEType {string} File MIME Type\r\n     * @returns {Promise<any>}\r\n     */\r\n    FileOpener.prototype.open = function (filePath, fileMIMEType) { return; };\r\n    /**\r\n     * Uninstalls a package\r\n     * @param packageId {string}  Package ID\r\n     * @returns {Promise<any>}\r\n     */\r\n    FileOpener.prototype.uninstall = function (packageId) { return; };\r\n    /**\r\n     * Check if an app is already installed\r\n     * @param packageId {string} Package ID\r\n     * @returns {Promise<any>}\r\n     */\r\n    FileOpener.prototype.appIsInstalled = function (packageId) { return; };\r\n    return FileOpener;\r\n}(IonicNativePlugin));\r\nFileOpener.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nFileOpener.ctorParameters = function () { return []; };\r\n__decorate([\r\n    Cordova({\r\n        callbackStyle: 'object',\r\n        successName: 'success',\r\n        errorName: 'error'\r\n    }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], FileOpener.prototype, \"open\", null);\r\n__decorate([\r\n    Cordova({\r\n        callbackStyle: 'object',\r\n        successName: 'success',\r\n        errorName: 'error'\r\n    }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], FileOpener.prototype, \"uninstall\", null);\r\n__decorate([\r\n    Cordova({\r\n        callbackStyle: 'object',\r\n        successName: 'success',\r\n        errorName: 'error'\r\n    }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], FileOpener.prototype, \"appIsInstalled\", null);\r\nFileOpener = __decorate([\r\n    Plugin({\r\n        pluginName: 'FileOpener',\r\n        plugin: 'cordova-plugin-file-opener2',\r\n        pluginRef: 'cordova.plugins.fileOpener2',\r\n        repo: 'https://github.com/pwlin/cordova-plugin-file-opener2',\r\n        platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8']\r\n    })\r\n], FileOpener);\r\nexport { FileOpener };\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@ionic-native/file-opener/index.js\n// module id = 370\n// module chunks = 0 6","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nimport { Injectable } from '@angular/core';\r\nimport { CordovaProperty, Plugin, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\r\n/**\r\n * @name File\r\n * @description\r\n * This plugin implements a File API allowing read/write access to files residing on the device.\r\n *\r\n * The File class implements static convenience functions to access files and directories.\r\n *\r\n * Example:\r\n * ```\r\n * import { File } from '@ionic-native/file';\r\n *\r\n * constructor(private file: File) { }\r\n *\r\n * ...\r\n *\r\n * this.file.checkDir(this.file.dataDirectory, 'mydir').then(_ => console.log('Directory exists')).catch(err => console.log('Directory doesnt exist'));\r\n *\r\n * ```\r\n *\r\n *  This plugin is based on several specs, including : The HTML5 File API http: //www.w3.org/TR/FileAPI/\r\n *  The (now-defunct) Directories and System extensions Latest: http: //www.w3.org/TR/2012/WD-file-system-api-20120417/\r\n *  Although most of the plugin code was written when an earlier spec was current: http: //www.w3.org/TR/2011/WD-file-system-api-20110419/\r\n *  It also implements the FileWriter spec : http: //dev.w3.org/2009/dap/file-system/file-writer.html\r\n *  @interfaces\r\n *  IFile\r\n *  Entry\r\n *  DirectoryEntry\r\n *  DirectoryReader\r\n *  FileSystem\r\n */\r\nvar File = (function (_super) {\r\n    __extends(File, _super);\r\n    function File() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.cordovaFileError = {\r\n            1: 'NOT_FOUND_ERR',\r\n            2: 'SECURITY_ERR',\r\n            3: 'ABORT_ERR',\r\n            4: 'NOT_READABLE_ERR',\r\n            5: 'ENCODING_ERR',\r\n            6: 'NO_MODIFICATION_ALLOWED_ERR',\r\n            7: 'INVALID_STATE_ERR',\r\n            8: 'SYNTAX_ERR',\r\n            9: 'INVALID_MODIFICATION_ERR',\r\n            10: 'QUOTA_EXCEEDED_ERR',\r\n            11: 'TYPE_MISMATCH_ERR',\r\n            12: 'PATH_EXISTS_ERR',\r\n            13: 'WRONG_ENTRY_TYPE',\r\n            14: 'DIR_READ_ERR',\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Get free disk space in Bytes\r\n     * @returns {Promise<number>} Returns a promise that resolves with the remaining free disk space in Bytes\r\n     */\r\n    File.prototype.getFreeDiskSpace = function () {\r\n        return new Promise(function (resolve, reject) {\r\n            cordova.exec(resolve, reject, 'File', 'getFreeDiskSpace', []);\r\n        });\r\n    };\r\n    /**\r\n     * Check if a directory exists in a certain path, directory.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} dir Name of directory to check\r\n     * @returns {Promise<boolean>} Returns a Promise that resolves to true if the directory exists or rejects with an error.\r\n     */\r\n    File.prototype.checkDir = function (path, dir) {\r\n        if ((/^\\//.test(dir))) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        var fullpath = path + dir;\r\n        return this.resolveDirectoryUrl(fullpath)\r\n            .then(function () {\r\n            return true;\r\n        });\r\n    };\r\n    /**\r\n     * Creates a new directory in the specific path.\r\n     * The replace boolean value determines whether to replace an existing directory with the same name.\r\n     * If an existing directory exists and the replace value is false, the promise will fail and return an error.\r\n     *\r\n     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} dirName Name of directory to create\r\n     * @param {boolean} replace If true, replaces file with same name. If false returns error\r\n     * @returns {Promise<DirectoryEntry>} Returns a Promise that resolves with a DirectoryEntry or rejects with an error.\r\n     */\r\n    File.prototype.createDir = function (path, dirName, replace) {\r\n        var _this = this;\r\n        if ((/^\\//.test(dirName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        var options = {\r\n            create: true\r\n        };\r\n        if (!replace) {\r\n            options.exclusive = true;\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, options);\r\n        });\r\n    };\r\n    /**\r\n     * Remove a directory at a given path.\r\n     *\r\n     * @param {string} path The path to the directory\r\n     * @param {string} dirName The directory name\r\n     * @returns {Promise<RemoveResult>} Returns a Promise that resolves to a RemoveResult or rejects with an error.\r\n     */\r\n    File.prototype.removeDir = function (path, dirName) {\r\n        var _this = this;\r\n        if ((/^\\//.test(dirName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, { create: false });\r\n        })\r\n            .then(function (de) {\r\n            return _this.remove(de);\r\n        });\r\n    };\r\n    /**\r\n     * Move a directory to a given path.\r\n     *\r\n     * @param {string} path The source path to the directory\r\n     * @param {string} dirName The source directory name\r\n     * @param {string} newPath The destionation path to the directory\r\n     * @param {string} newDirName The destination directory name\r\n     * @returns {Promise<DirectoryEntry|Entry>} Returns a Promise that resolves to the new DirectoryEntry object or rejects with an error.\r\n     */\r\n    File.prototype.moveDir = function (path, dirName, newPath, newDirName) {\r\n        var _this = this;\r\n        newDirName = newDirName || dirName;\r\n        if ((/^\\//.test(newDirName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, { create: false });\r\n        })\r\n            .then(function (srcde) {\r\n            return _this.resolveDirectoryUrl(newPath)\r\n                .then(function (deste) {\r\n                return _this.move(srcde, deste, newDirName);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Copy a directory in various methods. If destination directory exists, will fail to copy.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} dirName Name of directory to copy\r\n     * @param {string} newPath Base FileSystem of new location\r\n     * @param {string} newDirName New name of directory to copy to (leave blank to remain the same)\r\n     * @returns {Promise<Entry>} Returns a Promise that resolves to the new Entry object or rejects with an error.\r\n     */\r\n    File.prototype.copyDir = function (path, dirName, newPath, newDirName) {\r\n        var _this = this;\r\n        if ((/^\\//.test(newDirName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, { create: false });\r\n        })\r\n            .then(function (srcde) {\r\n            return _this.resolveDirectoryUrl(newPath)\r\n                .then(function (deste) {\r\n                return _this.copy(srcde, deste, newDirName);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * List files and directory from a given path.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} dirName Name of directory\r\n     * @returns {Promise<Entry[]>} Returns a Promise that resolves to an array of Entry objects or rejects with an error.\r\n     */\r\n    File.prototype.listDir = function (path, dirName) {\r\n        var _this = this;\r\n        if ((/^\\//.test(dirName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, { create: false, exclusive: false });\r\n        })\r\n            .then(function (de) {\r\n            var reader = de.createReader();\r\n            return _this.readEntries(reader);\r\n        });\r\n    };\r\n    /**\r\n     * Removes all files and the directory from a desired location.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} dirName Name of directory\r\n     * @returns {Promise<RemoveResult>} Returns a Promise that resolves with a RemoveResult or rejects with an error.\r\n     */\r\n    File.prototype.removeRecursively = function (path, dirName) {\r\n        var _this = this;\r\n        if ((/^\\//.test(dirName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'directory cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getDirectory(fse, dirName, { create: false });\r\n        })\r\n            .then(function (de) {\r\n            return _this.rimraf(de);\r\n        });\r\n    };\r\n    /**\r\n     * Check if a file exists in a certain path, directory.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} file Name of file to check\r\n     * @returns {Promise<boolean>} Returns a Promise that resolves with a boolean or rejects with an error.\r\n     */\r\n    File.prototype.checkFile = function (path, file) {\r\n        if ((/^\\//.test(file))) {\r\n            var err = new FileError(5);\r\n            err.message = 'file cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveLocalFilesystemUrl(path + file)\r\n            .then(function (fse) {\r\n            if (fse.isFile) {\r\n                return true;\r\n            }\r\n            else {\r\n                var err = new FileError(13);\r\n                err.message = 'input is not a file';\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Creates a new file in the specific path.\r\n     * The replace boolean value determines whether to replace an existing file with the same name.\r\n     * If an existing file exists and the replace value is false, the promise will fail and return an error.\r\n     *\r\n     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} fileName Name of file to create\r\n     * @param {boolean} replace If true, replaces file with same name. If false returns error\r\n     * @returns {Promise<FileEntry>} Returns a Promise that resolves to a FileEntry or rejects with an error.\r\n     */\r\n    File.prototype.createFile = function (path, fileName, replace) {\r\n        var _this = this;\r\n        if ((/^\\//.test(fileName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'file-name cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        var options = {\r\n            create: true\r\n        };\r\n        if (!replace) {\r\n            options.exclusive = true;\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getFile(fse, fileName, options);\r\n        });\r\n    };\r\n    /**\r\n     * Removes a file from a desired location.\r\n     *\r\n     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} fileName Name of file to remove\r\n     * @returns {Promise<RemoveResult>} Returns a Promise that resolves to a RemoveResult or rejects with an error.\r\n     */\r\n    File.prototype.removeFile = function (path, fileName) {\r\n        var _this = this;\r\n        if ((/^\\//.test(fileName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'file-name cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getFile(fse, fileName, { create: false });\r\n        })\r\n            .then(function (fe) {\r\n            return _this.remove(fe);\r\n        });\r\n    };\r\n    /** Write a new file to the desired location.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} fileName path relative to base path\r\n     * @param {string | Blob} text content or blob to write\r\n     * @param {IWriteOptions} options replace file if set to true. See WriteOptions for more information.\r\n     * @returns {Promise<any>} Returns a Promise that resolves to updated file entry or rejects with an error.\r\n     */\r\n    File.prototype.writeFile = function (path, fileName, text, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        if ((/^\\//.test(fileName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'file-name cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        var getFileOpts = {\r\n            create: !options.append,\r\n            exclusive: !options.replace\r\n        };\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (directoryEntry) {\r\n            return _this.getFile(directoryEntry, fileName, getFileOpts);\r\n        })\r\n            .then(function (fileEntry) {\r\n            return _this.writeFileEntry(fileEntry, text, options);\r\n        });\r\n    };\r\n    /** Write content to FileEntry.\r\n     *\r\n     * @hidden\r\n     * @param {FileEntry} fe file entry object\r\n     * @param {string | Blob} text content or blob to write\r\n     * @param {IWriteOptions} options replace file if set to true. See WriteOptions for more information.\r\n     * @returns {Promise<FileEntry>} Returns a Promise that resolves to updated file entry or rejects with an error.\r\n     */\r\n    File.prototype.writeFileEntry = function (fe, text, options) {\r\n        var _this = this;\r\n        return this.createWriter(fe)\r\n            .then(function (writer) {\r\n            if (options.append) {\r\n                writer.seek(writer.length);\r\n            }\r\n            if (options.truncate) {\r\n                writer.truncate(options.truncate);\r\n            }\r\n            return _this.write(writer, text);\r\n        })\r\n            .then(function () { return fe; });\r\n    };\r\n    /** Write to an existing file.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} fileName path relative to base path\r\n     * @param {string | Blob} text content or blob to write\r\n     * @returns {Promise<void>} Returns a Promise that resolves or rejects with an error.\r\n     */\r\n    File.prototype.writeExistingFile = function (path, fileName, text) {\r\n        return this.writeFile(path, fileName, text, { replace: true });\r\n    };\r\n    /**\r\n     * Read the contents of a file as text.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} file Name of file, relative to path.\r\n     * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as string or rejects with an error.\r\n     */\r\n    File.prototype.readAsText = function (path, file) {\r\n        return this.readFile(path, file, 'Text');\r\n    };\r\n    /**\r\n     * Read file and return data as a base64 encoded data url.\r\n     * A data url is of the form:\r\n     *      data: [<mediatype>][;base64],<data>\r\n  \r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} file Name of file, relative to path.\r\n     * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as data URL or rejects with an error.\r\n     */\r\n    File.prototype.readAsDataURL = function (path, file) {\r\n        return this.readFile(path, file, 'DataURL');\r\n    };\r\n    /**\r\n     * Read file and return data as a binary data.\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} file Name of file, relative to path.\r\n     * @returns {Promise<string>} Returns a Promise that resolves with the contents of the file as string rejects with an error.\r\n     */\r\n    File.prototype.readAsBinaryString = function (path, file) {\r\n        return this.readFile(path, file, 'BinaryString');\r\n    };\r\n    /**\r\n     * Read file and return data as an ArrayBuffer.\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} file Name of file, relative to path.\r\n     * @returns {Promise<ArrayBuffer>} Returns a Promise that resolves with the contents of the file as ArrayBuffer or rejects with an error.\r\n     */\r\n    File.prototype.readAsArrayBuffer = function (path, file) {\r\n        return this.readFile(path, file, 'ArrayBuffer');\r\n    };\r\n    File.prototype.readFile = function (path, file, readAs) {\r\n        var _this = this;\r\n        if ((/^\\//.test(file))) {\r\n            var err = new FileError(5);\r\n            err.message = 'file-name cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (directoryEntry) {\r\n            return _this.getFile(directoryEntry, file, { create: false });\r\n        })\r\n            .then(function (fileEntry) {\r\n            var reader = new FileReader();\r\n            return new Promise(function (resolve, reject) {\r\n                reader.onloadend = function () {\r\n                    if (reader.result !== undefined || reader.result !== null) {\r\n                        resolve(reader.result);\r\n                    }\r\n                    else if (reader.error !== undefined || reader.error !== null) {\r\n                        reject(reader.error);\r\n                    }\r\n                    else {\r\n                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });\r\n                    }\r\n                };\r\n                fileEntry.file(function (file) {\r\n                    reader[\"readAs\" + readAs].call(reader, file);\r\n                }, function (error) {\r\n                    reject(error);\r\n                });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Move a file to a given path.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} fileName Name of file to move\r\n     * @param {string} newPath Base FileSystem of new location\r\n     * @param {string} newFileName New name of file to move to (leave blank to remain the same)\r\n     * @returns {Promise<Entry>} Returns a Promise that resolves to the new Entry or rejects with an error.\r\n     */\r\n    File.prototype.moveFile = function (path, fileName, newPath, newFileName) {\r\n        var _this = this;\r\n        newFileName = newFileName || fileName;\r\n        if ((/^\\//.test(newFileName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'file name cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getFile(fse, fileName, { create: false });\r\n        })\r\n            .then(function (srcfe) {\r\n            return _this.resolveDirectoryUrl(newPath)\r\n                .then(function (deste) {\r\n                return _this.move(srcfe, deste, newFileName);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Copy a file in various methods. If file exists, will fail to copy.\r\n     *\r\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\r\n     * @param {string} fileName Name of file to copy\r\n     * @param {string} newPath Base FileSystem of new location\r\n     * @param {string} newFileName New name of file to copy to (leave blank to remain the same)\r\n     * @returns {Promise<Entry>} Returns a Promise that resolves to an Entry or rejects with an error.\r\n     */\r\n    File.prototype.copyFile = function (path, fileName, newPath, newFileName) {\r\n        var _this = this;\r\n        newFileName = newFileName || fileName;\r\n        if ((/^\\//.test(newFileName))) {\r\n            var err = new FileError(5);\r\n            err.message = 'file name cannot start with \\/';\r\n            return Promise.reject(err);\r\n        }\r\n        return this.resolveDirectoryUrl(path)\r\n            .then(function (fse) {\r\n            return _this.getFile(fse, fileName, { create: false });\r\n        })\r\n            .then(function (srcfe) {\r\n            return _this.resolveDirectoryUrl(newPath)\r\n                .then(function (deste) {\r\n                return _this.copy(srcfe, deste, newFileName);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.fillErrorMessage = function (err) {\r\n        try {\r\n            err.message = this.cordovaFileError[err.code];\r\n        }\r\n        catch (e) { }\r\n    };\r\n    /**\r\n     * Resolves a local file system URL\r\n     * @param fileUrl {string} file system url\r\n     * @returns {Promise<Entry>}\r\n     */\r\n    File.prototype.resolveLocalFilesystemUrl = function (fileUrl) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                window.resolveLocalFileSystemURL(fileUrl, function (entry) {\r\n                    resolve(entry);\r\n                }, function (err) {\r\n                    _this.fillErrorMessage(err);\r\n                    reject(err);\r\n                });\r\n            }\r\n            catch (xc) {\r\n                _this.fillErrorMessage(xc);\r\n                reject(xc);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Resolves a local directory url\r\n     * @param directoryUrl {string} directory system url\r\n     * @returns {Promise<DirectoryEntry>}\r\n     */\r\n    File.prototype.resolveDirectoryUrl = function (directoryUrl) {\r\n        return this.resolveLocalFilesystemUrl(directoryUrl)\r\n            .then(function (de) {\r\n            if (de.isDirectory) {\r\n                return de;\r\n            }\r\n            else {\r\n                var err = new FileError(13);\r\n                err.message = 'input is not a directory';\r\n                return Promise.reject(err);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Get a directory\r\n     * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method\r\n     * @param directoryName {string} Directory name\r\n     * @param flags {Flags} Options\r\n     * @returns {Promise<DirectoryEntry>}\r\n     */\r\n    File.prototype.getDirectory = function (directoryEntry, directoryName, flags) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                directoryEntry.getDirectory(directoryName, flags, function (de) {\r\n                    resolve(de);\r\n                }, function (err) {\r\n                    _this.fillErrorMessage(err);\r\n                    reject(err);\r\n                });\r\n            }\r\n            catch (xc) {\r\n                _this.fillErrorMessage(xc);\r\n                reject(xc);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Get a file\r\n     * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method\r\n     * @param fileName {string} File name\r\n     * @param flags {Flags} Options\r\n     * @returns {Promise<FileEntry>}\r\n     */\r\n    File.prototype.getFile = function (directoryEntry, fileName, flags) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                directoryEntry.getFile(fileName, flags, resolve, function (err) {\r\n                    _this.fillErrorMessage(err);\r\n                    reject(err);\r\n                });\r\n            }\r\n            catch (xc) {\r\n                _this.fillErrorMessage(xc);\r\n                reject(xc);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.remove = function (fe) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            fe.remove(function () {\r\n                resolve({ success: true, fileRemoved: fe });\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.move = function (srce, destdir, newName) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            srce.moveTo(destdir, newName, function (deste) {\r\n                resolve(deste);\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.copy = function (srce, destdir, newName) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            srce.copyTo(destdir, newName, function (deste) {\r\n                resolve(deste);\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.readEntries = function (dr) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            dr.readEntries(function (entries) {\r\n                resolve(entries);\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.rimraf = function (de) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            de.removeRecursively(function () {\r\n                resolve({ success: true, fileRemoved: de });\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.createWriter = function (fe) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            fe.createWriter(function (writer) {\r\n                resolve(writer);\r\n            }, function (err) {\r\n                _this.fillErrorMessage(err);\r\n                reject(err);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.write = function (writer, gu) {\r\n        if (gu instanceof Blob) {\r\n            return this.writeFileInChunks(writer, gu);\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            writer.onwriteend = function (evt) {\r\n                if (writer.error) {\r\n                    reject(writer.error);\r\n                }\r\n                else {\r\n                    resolve(evt);\r\n                }\r\n            };\r\n            writer.write(gu);\r\n        });\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    File.prototype.writeFileInChunks = function (writer, file) {\r\n        var BLOCK_SIZE = 1024 * 1024;\r\n        var writtenSize = 0;\r\n        function writeNextChunk() {\r\n            var size = Math.min(BLOCK_SIZE, file.size - writtenSize);\r\n            var chunk = file.slice(writtenSize, writtenSize + size);\r\n            writtenSize += size;\r\n            writer.write(chunk);\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            writer.onerror = reject;\r\n            writer.onwrite = function () {\r\n                if (writtenSize < file.size) {\r\n                    writeNextChunk();\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            };\r\n            writeNextChunk();\r\n        });\r\n    };\r\n    return File;\r\n}(IonicNativePlugin));\r\nFile.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nFile.ctorParameters = function () { return []; };\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"applicationDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"applicationStorageDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"dataDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"cacheDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"externalApplicationStorageDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"externalDataDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"externalCacheDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"externalRootDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"tempDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"syncedDataDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"documentsDirectory\", void 0);\r\n__decorate([\r\n    CordovaProperty,\r\n    __metadata(\"design:type\", String)\r\n], File.prototype, \"sharedDirectory\", void 0);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", []),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"getFreeDiskSpace\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"checkDir\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, Boolean]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"createDir\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"removeDir\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"moveDir\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"copyDir\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"listDir\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"removeRecursively\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"checkFile\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, Boolean]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"createFile\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"removeFile\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, Object, Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"writeFile\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"writeExistingFile\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"readAsText\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"readAsDataURL\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"readAsBinaryString\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"readAsArrayBuffer\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"moveFile\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, String, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"copyFile\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"resolveLocalFilesystemUrl\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"resolveDirectoryUrl\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object, String, Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"getDirectory\", null);\r\n__decorate([\r\n    CordovaCheck(),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object, String, Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], File.prototype, \"getFile\", null);\r\nFile = __decorate([\r\n    Plugin({\r\n        pluginName: 'File',\r\n        plugin: 'cordova-plugin-file',\r\n        pluginRef: 'cordova.file',\r\n        repo: 'https://github.com/apache/cordova-plugin-file',\r\n        platforms: ['Android', 'BlackBerry 10', 'Browser', 'Firefox OS', 'iOS', 'OS X', 'Ubuntu', 'Windows', 'Windows Phone']\r\n    })\r\n], File);\r\nexport { File };\r\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@ionic-native/file/index.js\n// module id = 371\n// module chunks = 0 6","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams, AlertController } from 'ionic-angular';\nimport { UserService } from '../../service/user.service';\nimport { Headers, Http } from '@angular/http';\nimport { FileOpener } from '@ionic-native/file-opener';\nimport { Transfer, TransferObject } from '@ionic-native/transfer';\nimport { File } from '@ionic-native/file';\n\n@IonicPage()\n@Component({\n  selector: 'page-setting',\n  templateUrl: 'setting.html',\n})\nexport class Setting {\n\n  Version = '';\n  ishide:boolean = true;\n  apkDownloadUrl='';\n\n  fileTransfer: TransferObject;\n\n  constructor(public fileOpener: FileOpener, public transfer: Transfer, public http: Http,public navCtrl: NavController, public navParams: NavParams, public UserService: UserService, public alertCtrl: AlertController, public file: File) {\n    this.Version = this.UserService.Version;\n    if(this.UserService._user._id){\n      this.ishide = false;\n    }\n  }\n\n  out() {\n    this.UserService.clearStorage();\n    this.navCtrl.pop();\n  }\n\n  //app版本获取\n  getAppVersion() {\n    this.UserService.presentLoadingDefault();\n    let url = \"http://www.devonhello.com/chihu/appversion\";\n\n    var headers = new Headers();\n    headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    this.http.post(url, \"\", {\n      headers: headers\n    })\n      .subscribe((res) => {\n        //alert(res.json()[0][\"v\"]);\n        if (res.json()[0][\"v\"] != this.UserService.Version) {\n          //可升级\n          this.apkDownloadUrl = res.json()[0][\"url\"];\n          this.fileTransfer = this.transfer.create();\n          this.AppV();\n        }else{\n          this.UserService.presentLoadingDismiss();\n          this.UserService.showAlert(\"已经是最新版了...\");\n        }\n      });\n  }\n\n  //下载最新版本\n  download() {\n    var _that = this;\n    var apkurl = this.file.externalDataDirectory + 'chihu.apk';\n    this.fileTransfer.download(this.apkDownloadUrl, apkurl).then((entry) => {\n      //打开apk\n      this.fileOpener.open(apkurl, 'application/vnd.android.package-archive')\n        .then(() => console.log('File is opened'))\n        .catch(e => alert('Error：' + e));\n\n    }, (error) => {\n      // handle error\n    });\n\n  }\n\n  AppV() {\n\n    this.UserService.presentLoadingDismiss();\n    let alert = this.alertCtrl.create({\n      title: '提示',\n      message: '是否要更新到最新版本?',\n      buttons: [\n        {\n          text: '取消',\n          role: 'cancel',\n          handler: () => {\n            //console.log('Cancel clicked');\n          }\n        },\n        {\n          text: '确定',\n          handler: () => {\n            this.download();\n            this.UserService.showAlert(\"新版吃乎正在后台下载中...稍后安装\");\n          }\n        }\n      ]\n    });\n\n    alert.present();\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/setting/setting.ts"],"sourceRoot":""}